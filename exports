	United Gaming Community
	UGCaccounts
	exports.UGCaccounts:getPlayerData(player) -- Returns JSON Player Data (Server)
	exports.UGCaccounts:getData(account, key) -- Returns value (Server)
	exports.UGCaccounts:setData(account, key, value) -- Returns boolean (Server)
	exports.UGCaccounts:getPlayerID(player) Returns number (Server)
	UGCdb
	exports.UGCdb:getConnection() -- Returns DB Connection (Server)
	UGCchat
	exports.UGCchat:outputMainChat(name, message) -- Outputs at main chat (Shared)
	exports.UGCchat:getPlayerZone(player) -- Returns Player Chatzone (LS/LF/SF) (Server)
	UGCskins
	exports.UGCskins:getPlayerOwnedSkin(player) -- Returns owned skin id (Server)
	UGCutils
	exports.UGCutils:striphex(text) --  Remove Hex Color Codes from string (Shared)
	exports.UGCutils:tohex(r, g, b [, a = 255]) --  Converts RGB to HEX (Shared)
	exports.UGCutils:torgb(hex) --  Converts HEX to RGB(Shared)
	exports.UGCutils:generatePlate([ player ]) -- Generates new number plate (Player has to be defined incase you're using it server-sided) (Shared)
	exports.UGCutils:centerWindow(window) -- Centers GUI Window for all resolutions.(Client)
	UGCbanking
	exports.UGCbanking:getPlayerBankBalance(player) -- Gets Player Bank Balance (Server)
	exports.UGCbanking:addMoneyToBank(player, amount, logs) -- Adds money to player account (Server)
	exports.UGCbanking:removeMoneyFromBank((player, amount, logs) -- Removes money from bank account (Server)
	exports.UGCbanking:giveMoneyByAccount(accountName, amount) -- Adds money to given account name. (Server)
	exports.UGCbanking:getAccountBankBalance(accountName, amount) -- Gets Money from given accountname. (Server)
	UGCgroups
	exports.UGCgroups:isPlayerInGroup(player) -- Returns true if player is in any group, else false. (Server)
	exports.UGCgroups:doesGroupExist(groupname) -- Returns true if group exists, else  false (Server)
	exports.UGCgroups:getPlayerGroupID(player) -- Returns player's group id (Server)
	exports.UGCgroups:getGroupID(groupname) -- Returns player group name (Server)
	exports.UGCgroups:getRankNameFromID(rank_id) -- Returns Rank Name from ID (Server)
	exports.UGCgroups:getPlayerGroupInfo(player) -- Returns player group info indexed table (Available Keys: name, creation, info, color) (Server)
	exports.UGCgroups:getGroupMembers(groupname) -- Returns group members table (Server)
	exports.UGCgroups:getGroupRanks(groupname) -- Returns group rank table (Server)
	exports.UGCgroups:getPlayerRank(player) -- Returns player rank id (Server)
	exports.UGCgroups:getPlayerPermission(player) -- Get Player Rank Permissions (Refer to Permission ID for more info) (Server)
	exports.UGCgroups:doesPlayerHavePermission(player, permid) -- Returns true if player has perm, else false (Server)
	exports.UGCgroups:getGroupFounder(groupname) -- Returns group founder (If online, then player, else account name) (Server)
	exports.UGCgroups:getRankIDFromName(rank_name) -- Returns Rank ID from Name
	exports.UGCgroups:getRankPermissions(rank_id) -- Returns Rank Permissions (Server)
	exports.UGCgroups:getOnlinePlayersInGroup(groupname) -- Returns table of all online members from group. (Server)
	exports.UGCgroups:outputGroupChat(player, message) -- Outputs group message to given player's group. (Server)
	exports.UGCgroups:getPlayerGroupName(player) -- Returns player group name (Server)
	exports.UGCgroups:insertGroupLog(groupname, log) -- Inserts Log in Group History (Server)
	exports.UGCgroups:getAccountWarning(accountName) -- Returns Player Warning by accountName (Server)
	exports.UGCgroups:getPermissionTable() -- Returns Permission Table (Server)
	exports.UGCgroups:getGroupList() -- Returns a table with group list, group members and group founder. (Server)
	exports.UGCgroups:getRankTotalPermissions(rank_id) -- Returns Integer on how many permissions rank has. (Server)
	exports.UGCgroups:getGroupMemberRank(group) -- Returns Group's Default Member Rank. (Server)
	UGCemployment
	exports.UGCemployment:doesPlayerHaveJob(player) -- Returns if player has job or not (Boolean) (Server)
	exports.UGCemployment:getPlayerJobRank(player, job) -- Returns player job rank (Server)
	exports.UGCemployment:givePlayerProgress(player, job, value) -- Gives Player Job Progress (Server)
	exports.UGCemployment:doesJobExist(job) -- Returns boolean whether job exist or not (Server)
	exports.UGCemployment:givePlayerJobMoney(player, job, money, ...) -- Gives player job money (Check below what's the use of ... or custom arguments)
	exports.UGCemployment:getPlayerJobPayment(player, job, payment_type, dist) -- Gets Player Job Payment Depending on level. distance is not needed unless payment_type is distant (Server)
	exports.UGCemployment:getPlayerProgress(player, job) -- Gets player job progress (Server)
	UGCvehiclesystem
	exports.UGCvehiclesystem:getVehicleOwner(vehicle) -- Gets Vehicle Player Owner (Server)
	exports.UGCvehiclesystem:isVehicleOwned(player, vehicle) -- Returns boolean whether player is owner of given vehicle. (Server)
	UGCdx
	exports.UGCdx:drawProgressBar(text, time, r, g, b) -- Returns Progress Bar ID (Client)
	exports.UGCdx:drawProgressBar(player, text, time, r, g, b) -- Returns Boolean if Progress Bar was created(Server)
	exports.UGCdx:destroyProgressBar(id) -- Destroys Progress Bars. (Client)
	(Note that progress bars which were created from server-side cannot be destroyed.)


	Events
	Server
	onPlayerMainChat
	Arguments Given:
	theMessage
	theZone
	- Source in this event is player who will chat.
	onPlayerTeamChat 
	Arguments Given:
	theTeam
	theMessage
	- Source in this event is player who will chat.
	onPlayerInteriorEnter
	Arguments Given:
	- Source in this event is player who will enter the interior.
	onPlayerTakeJob 
	Arguments Given:
	theJob
	theDivision
	theSkin
	- Source in this event is player who will take the job.
	onPlayerResign
	Arguments Given:
	theJob
	- Source in this event is player who will resign.
	Client
	onClientPlayerTakeJob
	Arguments Given:
	theJob
	theDivision
	theSkin
	- Source in this event is player who will take the job.
	onClientPlayerResign
	Arguments Given:
	theJob
	- Source in this event is player who will resign.

	UGC Groups Permission Table:
	
	local perm = {
		[1], -- Ability to invite player to group
		[2], -- Ability to kick player from group
		[3], -- Ability to warn player
		[4], -- Ability to change group color
		[5], -- Ability to add/delete/edit ranks
		[6], -- Ability to change group information
		[7], -- Ability to change group name
		[8] -- Ability to Promote/Demote Players
	}
	
	Creating a job
	Since we're using UGCemployment as core for our Job System, We'll be mostly using Events to know when Player will take your job. After getting your job added to UGCemployment job table, You'll either have to use onPlayerTakeJob (Server-Sided) or onClientPlayerTakeJob (Client-Sided) Events. Arguments in both events given will be job, division and the skin which the client has seleted. "source" of this event will be player who took the job in both events.

	Example Code:
	
	addEventHandler("onPlayerTakeJob", getRootElement(), function(job, division, skin)
		if job == "Pilot" then
			-- Trigger Pilot Mission Code
		end
	end)
	
	Paying a player after job mission is done
	You will have to use two exports here.

	exports.UGCemployment:givePlayerJobMoney(player, job, money, ...) -- Gives player job money (Check below what's the use of ... or custom arguments)
	exports.UGCemployment:getPlayerJobPayment(player, job, payment_type, dist) -- Gets Player Job Payment Depending on level. distance is not needed unless payment_type is distant (Server)

	How to give a static payment to player
	
	addEventHandler("ResourceName.onPlayerJobComplete", getRootElement(), functon()
	local payment = exports.UGCemployment:getPlayerJobPayment(player, "Bus Driver", "static")
	exports.UGCemployment:givePlayerJobMoney(player, "Bus Driver", payment, "- Earned $" .. payment) -- Extra arguments will show the description on successful hud
	end)
	
	How to give distant pay to player
	
	addEventHandler("ResourceName.onPlayerJobComplete", getRootElement(), functon()
	local payment = exports.UGCemployment:getPlayerJobPayment(player, "Pilot", "distant", distance)
	exports.UGCemployment:givePlayerJobMoney(player, "Pilot", payment, "- Earned $" .. payment) -- Extra arguments will show the description on successful hud
	end)
	
